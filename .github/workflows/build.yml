name: iOS Build and Deploy

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'
          check-latest: true

      - name: Install dependencies
        run: npm install

      - name: Install CocoaPods
        run: sudo gem install cocoapods -v 1.15.2

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install

      - name: Create .env file
        run: |
          echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> .env
          echo "KAKAO_API_KEY_WITH_KAKAO=${{ secrets.KAKAO_API_KEY_WITH_KAKAO }}" >> .env
          echo "NAVER_CONSUMER_KEY=${{ secrets.NAVER_CONSUMER_KEY }}" >> .env
          echo "NAVER_SECRECT_KEY=${{ secrets.NAVER_SECRECT_KEY }}" >> .env
          echo "NAVER_URL=${{ secrets.NAVER_URL }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "GOOGLE_WEB_CLIENT_ID=${{ secrets.GOOGLE_WEB_CLIENT_ID }}" >> .env
          echo "GOOGLE_WEB_CLIENT_SECRET=${{ secrets.GOOGLE_WEB_CLIENT_SECRET }}" >> .env
          echo "REDIRECT_URI=${{ secrets.REDIRECT_URI }}" >> .env
          echo "NAVER_MAP_CLIENT_ID=${{ secrets.NAVER_MAP_CLIENT_ID }}" >> .env

      - name: Create .xcode.env.local file
        run: |
          echo "${{ secrets.XCODE_ENV_LOCAL_KEY }}" > ios/.xcode.env.local

      - name: Decode iOS secrets
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}
          APNS_KEY_BASE64: ${{ secrets.APNS_KEY_BASE64 }}
          APNS_KEY_PASSWORD: ${{ secrets.APNS_KEY_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}
          EXPORT_OPTIONS_BASE64: ${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/ios_dist_pp.mobileprovision
          APNS_KEY_PATH=$RUNNER_TEMP/apns_key.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH="${{ github.workspace }}/ios/PoppinProject/ExportOptions.plist"
          
          mkdir -p $(dirname "$EXPORT_OPTIONS_PATH")
          
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          echo -n "$APNS_KEY_BASE64" | base64 --decode -o $APNS_KEY_PATH
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $APNS_KEY_PATH -P "$APNS_KEY_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Set Bundle Version
        run: |
          cd ios
          PLIST_PATH="./PoppinProject/Info.plist"
          NEW_BUNDLE_VERSION=$(date +%Y%m%d%H%M)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUNDLE_VERSION" "$PLIST_PATH"

      - name: Build iOS app
        env:
          NODE_BINARY: /usr/local/bin/node
        run: |
          cd ios
          xcodebuild -workspace PoppinProject.xcworkspace -scheme PoppinProject -sdk iphoneos -configuration Release archive -archivePath $PWD/build/PoppinProject.xcarchive
          xcodebuild -exportArchive -archivePath $PWD/build/PoppinProject.xcarchive -exportOptionsPlist $PWD/PoppinProject/ExportOptions.plist -exportPath $PWD/build/PoppinProject

      - name: Rename and Move IPA file
        run: |
          IPA_FILE=$(find ios/build/PoppinProject -name "*.ipa")
          mv "$IPA_FILE" "${GITHUB_WORKSPACE}/build/ios/ipa/MyApp.ipa"

      - name: Install private API key P8
        env:
          PRIVATE_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY_BASE64 }}
          API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          API_ISSUER: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8

      - name: Upload IPA to TestFlight
        env:
          API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          API_ISSUER: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        run: xcrun altool --upload-app --type ios -f "${GITHUB_WORKSPACE}/build/ios/ipa/MyApp.ipa" --apiKey $API_KEY --apiIssuer $API_ISSUER
